class Solution {
private:
    void dfs(vector<int>& candidates, vector<vector<int>>& res, vector<int>& cur, int target, int pos){
        if(target < 0)
            return;
        if(target == 0){
            res.push_back(cur);
            return;
        }
        for(int i = pos; i < candidates.size(); i++){
            if(candidates[i] > target)
                return;
            cur.push_back(candidates[i]);
            dfs(candidates, res, cur, target - candidates[i], i + 1);
            cur.pop_back();
        }
    }
    
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
       sort(candidates.begin(), candidates.end());
       vector<int> cur;
       vector<vector<int>> res;
       dfs(candidates, res, cur, target, 0);
       set<vector<int>> s(res.begin(), res.end());
       vector<vector<int>> ret(s.begin(), s.end());
       return ret;
    }
};
