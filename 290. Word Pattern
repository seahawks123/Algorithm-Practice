class Solution {
public:
    bool wordPattern(string pattern, string str) {
        str.push_back(' ');
        unordered_map<char, string> map1;
        unordered_map<string, char> map2;
        int count = 0;
        string build;
        for(int i = 0; i < str.size(); i++){
            if(str[i] == ' '){
                if((map1.count(pattern[count]) && map1[pattern[count]] != build) || (map2.count(build) && map2[build] != pattern[count])){
                    return false;
                }
                if(!map1.count(pattern[count])){
                    map1[pattern[count]] = build;
                }
                if(!map2.count(build)){
                    map2[build] = pattern[count];
                }
                count++;
                build.clear();
            }
            else{
                build.push_back(str[i]);
            }
        }
        return count == pattern.size();
    }
};
