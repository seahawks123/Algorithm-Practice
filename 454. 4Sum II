class Solution {
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        if(A.size() == 0)
            return 0;
        for(int i = 0; i < A.size(); i++){
            for(int j = 0; j < B.size(); j++){
                int left = 0;
                int right = A.size()-1;
                while(left < A.size() && right >= 0)
                int sum = A[i] + B[j] + C[left] + D[right];
                if(sum == 0){
                    count++;
                    left++;
                    right--;
                }
                else if(sum > 0)
                    left
            }
        }
    }
};



class Solution {
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        if(A.size() == 0)
            return 0;
        int count = 0;
        unordered_map<int, int> map;
        for(int i = 0; i < A.size(); i++){
            for(int j = 0; j < B.size(); j++){
                map[A[i] + B[j]]++;        
            }
        }
        
        for(int i = 0; i < C.size(); i++){
            for(int j = 0; j < D.size(); j++){
                int target = 0 - (C[i]  + D[j]);
                if(map.count(target)){
                    count += map[target];
                }
            }
        }
        return count;
    }
};
