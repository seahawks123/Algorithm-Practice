class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length())
            return false;
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        return s == t?true:false;
    }
};


class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length())
            return false;
        int hashtable[26] = {0};
        int hashtable_t[26] = {0};
        for(int i = 0; i < s.length(); i++){
            hashtable[s[i] - 'a']++;    
        }
        for(int i = 0; i < t.length(); i++){
            hashtable_t[t[i] - 'a']++;
        }
        for(int i = 0; i < 26; i++){
            if(hashtable[i] != hashtable_t[i])
                return false;
        }
        return true;
    }
};

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length())
            return false;
        unordered_map<char, int> map1;
        for(int i = 0; i < s.length(); i++){
            map1[s[i]]++;
            map1[t[i]]--;
        }
        for(auto it = map1.begin(); it != map1.end(); it++){
            if(it->second != 0)
                return false;
        }
        return true;
    }
};
