class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        unordered_map<int, vector<int>> map;
        vector<int> in(numCourses, 0);
        queue<int> q;
        vector<int> res;
        for(int i = 0; i < prerequisites.size(); i++){
            map[prerequisites[i].second].push_back(prerequisites[i].first);
            in[prerequisites[i].first]++;
        }
        for(int i = 0; i < in.size(); i++){
            if(in[i] == 0){
                q.push(i);    
            }
        }
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            res.push_back(cur);
            vector<int> neighbors = map[cur];
            for(int i = 0; i < neighbors.size(); i++){
                if(--in[neighbors[i]] == 0){
                    q.push(neighbors[i]);
                }
            }
        }
        return res.size() == numCourses?res:vector<int>(0);
    }
};
