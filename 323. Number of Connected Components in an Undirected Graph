class Solution {
private:
    void dfs(unordered_map<int, vector<int>>& m, unordered_set<int>& s, int cur){
        vector<int> vec = m[cur];
        for(int i = 0; i < vec.size(); i++){
            if(s.count(vec[i]) == 0){
                s.insert(vec[i]);
                dfs(m, s, vec[i]);
            }    
        }
    }
    
public:
    int countComponents(int n, vector<pair<int, int>>& edges) {
        unordered_map<int, vector<int>> m;
        unordered_set<int> s;
        for(int i= 0; i < edges.size(); i++){
            m[edges[i].first].push_back(edges[i].second);   
            m[edges[i].second].push_back(edges[i].first); 
        } 
        int count = 0;
        for(int i = 0; i < n; i++){
            if(s.count(i) == 0){
                s.insert(i);
                count++;
                dfs(m, s, i);
            }    
        }
        return count;
    }
};
