class Solution {
private:
    bool contain_duplicate(string s, char c){
        for(int i = 0; i < s.length(); i++){
            if(s[i] == c)
                return true;
        }
        return false;
    }
    
public:
    int lengthOfLongestSubstring(string s) {
        if(s.length() <= 1)
            return s.length();
        string ss;
        ss.push_back(s[0]);
        int global_max = 1;
        int max = 1;
        for(int i = 1; i < s.length(); i++){
            if(contain_duplicate(ss, s[i])){
                ss.clear();
                ss.push_back(s[i]);
                max = 1;
            }
            else{
                ss.push_back(s[i]);
                max++;
                if(max > global_max)
                    global_max = max;
            }
        }
        return global_max;
    }
};



class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int left = 0, right = 0, res = 0;
        unordered_set<int> ss;
        while(right < s.size()){
            if(ss.count(s[right]) == 0){
                ss.insert(s[right]);
                right++;
            }
            else{
                while(s[left] != s[right]){
                    ss.erase(s[left]);
                    left++;
                }
                ss.erase(s[left]);
                left++;
            }
            res = max(res, right - left);
        }
        return res;
    }
};



class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int left = 0, res = 0;
        vector<int> vec(256, -1);
        for(int i = 0; i < s.size(); i++){
            if(vec[s[i]] != -1 && vec[s[i]] >= left){
                left = vec[s[i]] + 1;
            }
            vec[s[i]] = i;
            res = max(res, i - left + 1);
        }
        return res;
    }
};
