/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    TreeNode* in_order_predecessor(TreeNode* root, TreeNode* parent, bool left){
        if(!root)
            return NULL;
        if(!root->left){
            if(left && root->right){
                parent->left = root->right;
            }
            if(left && !root->right){
                parent->left = NULL;
            }
            if(!left && root->right){
                parent->right = root->right;
            }                
            if(!left && !root->right){
                parent->right = NULL;
            }
            return root;   
        }
        return in_order_predecessor(root->left, root, true);
    }
    
    void print_tree(TreeNode* root){
        if(root == NULL)
            return;
        cout<<root->val<<" ";
        print_tree(root->left);
        print_tree(root->right);
        return;
    }
    
    TreeNode* helper(TreeNode* root, int key){
        if(!root)
            return NULL;
        if(root->val == key){
            if(!root->left && !root->right){
                delete root;
                return NULL;
            }
            if(root->left && !root->right){
                TreeNode* res = root->left;
                delete root;
                return res;
            }
            if(!root->left && root->right){
                TreeNode* res = root->right;
                delete root;
                return res;
            }
            else{
                TreeNode* predecessor = in_order_predecessor(root->right, root, false);
                TreeNode* left = root->left;
                TreeNode* right = root->right;
                if(predecessor == right)
                    predecessor->right = NULL;
                else
                    predecessor->right = right;
                predecessor->left = left;
                return predecessor;
            }
        }
        if(root->val > key)
            root->left = helper(root->left, key);
        else
            root->right = helper(root->right, key);
        return root;
    }
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root)
            return NULL;
        TreeNode* parent = NULL;
        return helper(root, key);
    }
};

