class MedianFinder {
private:
    priority_queue<int> max_heap;   //smaller part
    priority_queue<int, vector<int>, greater<int>> min_heap; //bigger part
    
public:
    /** initialize your data structure here. */
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(max_heap.empty() || num < max_heap.top()){
            if(max_heap.size() <= min_heap.size()){
                max_heap.push(num);
            }
            else{
                min_heap.push(max_heap.top());
                max_heap.pop();
                max_heap.push(num);
            }
        } 
        else if(min_heap.empty() || num > min_heap.top()){
            if(min_heap.size() <= max_heap.size()){
                min_heap.push(num);
            }
            else{
                max_heap.push(min_heap.top());
                min_heap.pop();
                min_heap.push(num);
            }
        }
        else{
            if(max_heap.size() <= min_heap.size()){
                max_heap.push(num);
            }
            else
                min_heap.push(num);
        }
    }
    
    double findMedian() {
        if(max_heap.empty()){
            return 0;
        }    
        if(max_heap.size() == min_heap.size()){
            return (max_heap.top() + min_heap.top())/2.0;
        }
        else{
            return max_heap.size() > min_heap.size()?max_heap.top():min_heap.top();
        }
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
