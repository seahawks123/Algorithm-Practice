class Solution {
private:
    void helper(vector<int>& nums, int target, int low, int high, vector<int>& res){
        if(low > high)
            return;
        int mid = (low + high)/2;
        if(nums[mid] == target){
            res.push_back(mid);
            res.push_back(mid);
            int r = mid+1;
            int l = mid-1;
            while(r < nums.size() && (nums[r] == target)){
                res.push_back(r);
                r += 1;
            }
            while(l >= 0 && (nums[l] == target)){
                res.push_back(l);
                l -= 1;
            }
            
        }
        else if(nums[mid] > target){
            helper(nums, target, low, mid - 1, res);
        }
        else{
            helper(nums, target, mid + 1, high, res);
        }
        return;
    }
    
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int size = nums.size();
        vector<int> vec(2, -1);
        if(size == 0 || target > nums[size-1] || target < nums[0]){
            return vec;
        }
        vector<int> res;
        helper(nums, target, 0, size-1, res);
        sort(res.begin(), res.end());
        if(res.size() == 0)
            return vec;
        int low = res[0];
        int high = res[res.size()-1];
        res.clear();
        res.push_back(low);
        res.push_back(high);
        return res;
    }
};
