class Solution {
public:
    int distributeCandies(vector<int>& candies) {
        int num = candies.size()/2;   
        unordered_map<int, int> map;
        for(int i = 0; i < candies.size(); i++){
            map[candies[i]]++;    
        }
        if(map.size() >= num){
            return num;    
        }
        int res = map.size();
        for(auto it = map.begin(); it != map.end(); it++){
            if(it->second > 1){
                num -= it->second - 1;
            }
            if(num <= 0)
                return res;
        }
        for(auto it = map.begin(); it != map.end(); it++){
            num--;
            res--;
            if(num == 0)
                return res;
        }
        return res;
    }
};


class Solution {
public:
    int distributeCandies(vector<int>& candies) {
        unordered_set<int> kinds;
        for (int kind : candies) {
            kinds.insert(kind);
        }
        return min(kinds.size(), candies.size() / 2);
    }
};
