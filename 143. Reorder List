/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 class Solution {
 public:
 	ListNode* reverseList(ListNode* head) {
 		if(head == NULL || head->next == NULL)
 			return head;
 		ListNode* dummy = new ListNode(INT_MAX);
 		ListNode* runner1 = head;
 		ListNode* runner2 = head;
 		ListNode* temp;
 		while(runner2 != NULL){
 			runner2 = runner2->next;
 			temp = dummy->next;
 			dummy->next = runner1;
 			runner1->next = temp;
 			runner1 = runner2;
 		}
 		return dummy->next;
 	}

 	void reorderList(ListNode* head) {
 		if(head == NULL || head->next == NULL || head->next->next == NULL)
 			return;
 		ListNode* slow = head;
 		ListNode* fast = head;
 		ListNode* slow_prev;	
 		while(fast != NULL && fast->next != NULL){
 			slow_prev = slow;
 			fast = fast->next->next;
 			slow = slow->next;
 		}
 		slow_prev->next = NULL;
 		ListNode* head2 = reverseList(slow);
 		ListNode* dummy = new ListNode(INT_MAX);
 		ListNode* cur = dummy;
 		while(head && head2){
 			cur->next = head;
 			head= head->next;
 			if(!cur->next)
 				cout<<"something wrong here"<<endl;
 			cur->next->next = head2;
 			cur = head2;
 			
 			head2 = head2->next;
 		}
 		if(head2)
 			cur->next = head2;
 	}
 };




// method 2
/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/
class Solution {
public:
	ListNode* oddEvenList(ListNode* head) {
		if(!head || !head->next)
			return head;
		ListNode* even_head = head->next;
		ListNode* odd_runner = head;
		ListNode* even_runner = head->next;
		while(even_runner && even_runner->next){
			odd_runner->next = even_runner->next;
			odd_runner = odd_runner->next;
			even_runner->next = odd_runner->next;
			even_runner = even_runner->next;
		}
		odd_runner->next = even_head;
		return head;
	}
};
