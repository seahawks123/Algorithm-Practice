/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    void helper(TreeNode* root, int k, int& res, int& count){
        if(!root)
            return;
        helper(root->left, k, res, count);
        count++;
        if(count == k)
            res = root->val;
        helper(root->right, k, res, count);
    }
    
    int kthSmallest(TreeNode* root, int k) {
        int res = 0;
        int count = 0;
        helper(root, k, res, count);
        return res;
    }
};

//Solution 2:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    void helper(TreeNode* root, vector<int>& res){
        if(root == NULL)
            return;
        helper(root->left, res);
        res.push_back(root->val);
        helper(root->right, res);
    }
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> ret;
        helper(root, ret);
        return ret[k-1];
    }
};

//solution 3:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:

    int count(TreeNode* root){
        if(!root)
            return 0;
        if(!root->left && !root->right)
            return 1;
        int left = count(root->left);
        int right = count(root->right);
        return 1 + left + right;
    }
public:
    int kthSmallest(TreeNode* root, int k) {
        int left_size = count(root->left);
        if(k - left_size == 1)
            return root->val;
        if(k <= left_size){
            return kthSmallest(root->left, k);
        }
        if(k > left_size){
            return kthSmallest(root->right, k - left_size -1);
        }
        return -1;
    }
};

