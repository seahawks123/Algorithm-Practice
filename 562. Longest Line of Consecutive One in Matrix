class Solution {
public:
    int longestLine(vector<vector<int>>& M) {
        int m = M.size();
        if(m == 0)
            return 0;
        int n = M[0].size();
        if(n == 0)
            return 0;
        int res = 0; 
        int dp[m][n][4];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                for(int k = 0; k < 4; k++){
                    if(M[i][j]){
                        dp[i][j][k] = 1; 
                    }
                    else
                        dp[i][j][k] = 0;
                }
                if(dp[i][j][0] && j-1 >= 0)   dp[i][j][0] = max(dp[i][j][0], 1 + dp[i][j-1][0]);
                if(dp[i][j][1] && i-1 >= 0)   dp[i][j][1] = max(dp[i][j][1], 1 + dp[i-1][j][1]);
                if(dp[i][j][2] && i-1 >= 0 && j - 1 >= 0)   dp[i][j][2] = max(dp[i][j][2], 1 + dp[i-1][j-1][2]);
                if(dp[i][j][3] && i-1 >= 0 && j + 1 < n)   dp[i][j][3] = max(dp[i][j][3], 1 + dp[i-1][j+1][3]);
                res = max(res, max(dp[i][j][0], dp[i][j][1]));
                res = max(res, max(dp[i][j][2], dp[i][j][3]));
            }
        }
        return res;
    }
};
