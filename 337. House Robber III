/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        if(!root)
            return 0;
        int val = 0;
        if(root->left){
            val = val + rob(root->left->left) + rob(root->left->right);
        }
        if(root->right){
            val = val + rob(root->right->left) + rob(root->right->right);
        }
        return max(val + root->val, rob(root->left) + rob(root->right));
    }
};

//solution 2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    vector<int> helper(TreeNode* root){
        vector<int> res(2, 0);
        if(!root)
            return res;
        vector<int> left = helper(root->left);
        vector<int> right = helper(root->right);
        res[0] = max(left[0], left[1]) + max(right[0], right[1]);
        res[1] = root->val + left[0] + right[0];
        return res;
    }
public:
    
    int rob(TreeNode* root) {
        if(!root)
            return 0;
        vector<int> res(2, 0);
        res = helper(root);
        return max(res[0], res[1]);
    }
};
