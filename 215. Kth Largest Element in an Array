class Solution {
    
private:
    void print_vec(vector<int>& vec){
        for(int i = 0; i < vec.size()-1;i++){
            cout<<vec[i]<<", ";
        }
        cout<<vec[vec.size()-1]<<endl;
    }
public:
    int helper(vector<int>& nums, int k, int low, int high){
        int pivot = nums[high];
        int pivot_wall = low;
        for(int i = low; i < high; i++){
            if(nums[i] > pivot){
                swap(nums[i], nums[pivot_wall]);
                pivot_wall++;
            }
        }
        swap(nums[high], nums[pivot_wall]);
        int size = pivot_wall - low;
        if((size + 1) == k)
            return nums[pivot_wall];
        if(size >= k)
            return helper(nums, k, low, pivot_wall-1);
        if(k > (size+1))
            return helper(nums, k-size-1, pivot_wall+1, high);
        return -1;
    }
    
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        return helper(nums, k, 0, n-1);
    }
};
