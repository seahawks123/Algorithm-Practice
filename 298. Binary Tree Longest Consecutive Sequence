/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    int helper(TreeNode* root, int& global){
        if(!root)
            return 0;
        if(!root->left && !root->right){
            return 1;
        }
        int left = helper(root->left, global);
        int right = helper(root->right, global);
        bool left_ok = false, right_ok = false;
        int res = 1;
        if(root->left && root->left->val-1 == root->val){
            res = left + 1;
        }
        if(root->right && root->right->val-1 == root->val){
            res = max(res, right + 1);
        }
        global = max(res, global);
        return res;
    }
    
public:
    int longestConsecutive(TreeNode* root) {
        if(!root)
            return 0;
        if(!root->left && !root->right){
            return 1;
        }
        int res = -1;
        helper(root, res);
        return res == -1?0:res;
    }
};
