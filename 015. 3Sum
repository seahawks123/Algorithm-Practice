class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        set<vector<int>> res;
        for(int i = 0; i < nums.size(); i++){
            for(int j = i + 1; j < nums.size(); j++){
                for(int k = j + 1; k < nums.size(); k++){
                    if(nums[i] + nums[j] + nums[k] == 0){
                        int temp[] = {nums[i], nums[j], nums[k]};
                        vector<int> cur(temp, temp + sizeof(temp)/sizeof(temp[0]));
                        res.insert(cur);
                    }    
                }
            }
        }
        vector<vector<int>> ret(res.begin(), res.end());
        return ret;  
    }
};


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size() <= 2)
            return vector<vector<int>> (0);
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        for(int i = 0; i < nums.size() - 2; i++){
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            int left = i + 1, right = nums.size()-1;
            while(left < right){
                if(nums[i] + nums[left] + nums[right] == 0){
                    int temp[] = {nums[i], nums[left], nums[right]};
                    vector<int> cur(temp, temp + sizeof(temp)/sizeof(temp[0]));
                    res.push_back(cur);
                    int temp1 = nums[left];
                    while(left < right && nums[left] == temp1)
                        left++;
                    int temp2 = nums[right];
                    while(left < right && nums[right] == temp2)
                        right--;
                }
                else if(nums[i] + nums[left] + nums[right] > 0){
                    int temp3 = nums[right];
                    while(left < right && nums[right] == temp3)
                        right--;
                    
                }
                else{
                    int temp4 = nums[left];
                    while(left < right && nums[left] == temp4)
                    left++;
                }
            }
        }
        return res;
    }
};
