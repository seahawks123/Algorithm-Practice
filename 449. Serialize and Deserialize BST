/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root)
            return "";
        string left = serialize(root->left);
        string right = serialize(root->right);
        return left + to_string(root->val) + right;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size() == 0)
            return NULL;
        if(data.size() == 1){
            TreeNode* temp = new TreeNode(data[0] - '0');
            return temp;
        }
        int index = -1;
        for(int i = 0; i < data.size(); i++){
            if(i > 0 && i < data.size() -1){
                if(data[i] >= data[i-1] && data[i] <= data[i+1]){
                    index = i;
                    break;
                }
            }
        }
        if(index == -1){
            data[1] >= data[0]?index = 0:index = data.size() -1; 
        }
        TreeNode* temp = new TreeNode(data[index] - '0');
        temp->left = deserialize(data.substr(0, index));
        temp->right = deserialize(data.substr(index+1));
        return temp;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
private:
    int stoi(string s){
        int num = 0;
        for(int i = 0; i < s.size(); i++){
            num = num*10 + s[i] - '0';    
        }
        return num;
    }
    
    vector<int> split(string s){
        int i = 0;
        vector<int> vec;
        while(i < s.size()){
            int begin = i;
            while(i < s.size() && s[i] != ','){
                i++;
            }
            int v = stoi(s.substr(begin, i-begin));
            vec.push_back(v);
            i++;
        }
        return vec;
    }
    
    TreeNode* dfs(vector<int>& vec, int l, int r){
        if(l > r)
            return NULL;
        if(l == r){
            TreeNode* root = new TreeNode(vec[l]);
            return root;
        }
        TreeNode* root = new TreeNode(vec[l]);
        int i = l+1;
        for(; i <= r; i++){
            if(vec[i] >= vec[l])
                break;
        }
        root->left = dfs(vec, l+1, i-1);
        root->right = dfs(vec, i, r);
        return root;
        
    }
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root){
            return "";
        }   
        string res = to_string(root->val);
        if(root->left)
            res += "," + serialize(root->left);
        if(root->right)
            res += "," + serialize(root->right);
        return res;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        cout<<data<<endl;
        if(data.size() == 0)
            return NULL;
        vector<int> vec = split(data);
        return dfs(vec, 0, vec.size() - 1);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
