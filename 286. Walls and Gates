class Solution {
private:
    void bfs(vector<vector<int>>& rooms, int i, int j, vector<vector<int>> visited){
        queue<pair<pair<int, int>, int>> q;
        q.push(make_pair(make_pair(i, j), 0));
        while(!q.empty()){
            pair<pair<int, int>, int> cur = q.front();
            q.pop();
            int i = cur.first.first, j = cur.first.second, dis = cur.second;
            visited[i][j] = 1;
            rooms[i][j] = min(rooms[i][j], dis);
            if(i + 1 < rooms.size() && rooms[i+1][j] != -1 && rooms[i+1][j] != 0 && !visited[i+1][j]){
                q.push(make_pair(make_pair(i + 1, j), dis + 1));
            }
            if(i - 1 >= 0 && rooms[i-1][j] != -1 && rooms[i-1][j] != 0 && !visited[i-1][j]){
                q.push(make_pair(make_pair(i - 1, j), dis + 1));
            }
            if(j + 1 < rooms[0].size() && rooms[i][j+1] != -1 && rooms[i][j+1] != 0 && !visited[i][j+1]){
                q.push(make_pair(make_pair(i, j+1), dis + 1));
            }
            if(j >= 0 && rooms[i][j-1] != -1 && rooms[i][j-1] != 0 && !visited[i][j-1]){
                q.push(make_pair(make_pair(i, j-1), dis + 1));
            }
            
        }
        
    }
    
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        int m = rooms.size();
        if(m == 0)
            return;
        int n = rooms[0].size();
        if(n == 0)
            return;
        vector<vector<int>> visited(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(rooms[i][j] == 0){
                    bfs(rooms, i, j, visited);
                }
            }
        }
    }
};



class Solution {  
public:  
    void DFS(vector<vector<int>>& rooms, int x, int y, int dis)  
    {  
        int row = rooms.size(), col = rooms[0].size();  
        if(x<0||y<0||x>=row||y>=col||rooms[x][y]<0||rooms[x][y]<dis) return;  
        rooms[x][y] = dis++;  
        DFS(rooms, x+1, y, dis);  
        DFS(rooms, x-1, y, dis);  
        DFS(rooms, x, y+1, dis);  
        DFS(rooms, x, y-1, dis);  
    }  
      
    void wallsAndGates(vector<vector<int>>& rooms) {  
        if(rooms.size()==0) return;  
        int row = rooms.size(), col = rooms[0].size();  
        for(int i = 0; i < row; i++)  
        {  
            for(int j = 0; j < col; j++)  
                if(rooms[i][j] == 0) DFS(rooms, i, j, 0);  
        }  
    }  
};  
