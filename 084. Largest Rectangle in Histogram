class Solution {
private:
    int find_min(vector<int>& heights){
        int res = INT_MAX;
        for(int i = 0; i < heights.size(); i++){
            if(heights[i] < res)
                res = heights[i];
        }
        return res;
    }
public:
    int largestRectangleArea(vector<int>& heights) {
        int left = 0, right = heights.size() - 1;
        int res = -1;
        int i = 0;
        while(left <= right){
            vector<int> temp(right - left + 1);
            for(int i = 0; i <= right-left; i++){
                temp[i] = heights[i + left];
            }
            int min = find_min(temp);
            int val = (right - left + 1)*min;
            if(val > res){
                res = val;
            }
            if(heights[left] <= heights[right]){
                left++;
            }
            else{
                right--;
            }
            i++;
        }
        return res == -1?0:res;
    }
};




class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        if(heights.size() < 1)
            return 0;
        int val = -1;
        for(int i = 0; i < heights.size(); i++){
            int min_h = heights[i];
            for(int j = i; j < heights.size(); j++){
                min_h = min(min_h, heights[j]);
                int width = j - i + 1;
                val = max(val, width * min_h);
            }
        }
        return val;
    }
};


class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        heights.push_back(0);
        stack<int> s;
        int n = heights.size();
        int maxArea = 0;
        int h = 0, w = 0;
        for(int i = 0; i < n; i++){
            if(s.empty() || heights[s.top()] < heights[i]){
                s.push(i);
            }
            else{
                while(!s.empty() && heights[i] < heights[s.top()]){
                    h = heights[s.top()];
                    s.pop();
                    w = s.empty()?i:(i - (s.top() + 1));
                    maxArea = max(maxArea, w*h);
                }
                s.push(i);
                
            }
        }
        return maxArea;
    }
};
