/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
private: 
    double get_slope(Point p, Point q){
        double xx = p.x;
        double xxx = q.x;
        double yy = p.y;
        double yyy = q.y;
        if(xx == xxx)
            return 9999999;
        return (yyy - yy)/(xxx - xx);
    }
public:
    int maxPoints(vector<Point>& points) {
        if(points.size() <= 2)
            return points.size();
        int size = points.size();
        int global_max = -1;
        for(int i = 0; i < size; i++){ 
            unordered_map<double, int> map;
            int cur_max = 1;
            int same = 0;
            for(int j = 0; j < size; j++){
                if(i == j)
                    continue;
                Point p1 = points[i];
                Point p2 = points[j];
                if(p1.x == p2.x && p1.y == p2.y){
                    same++;
                    continue;
                }
                double slope = get_slope(points[i], points[j]);
                if(map.find(slope) == map.end())
                    map[slope] = 2;
                else
                    map[slope]++;
                if(map[slope] > cur_max){
                    cur_max = map[slope];
                }
            }
            cur_max = cur_max + same;
            global_max = max(cur_max, global_max);
        }
        return global_max;
    }
};
