class Solution {
private:
    void dfs(vector<vector<char>>& grid, int m, int n, int i, int j){
        if(i >= m || i < 0 || j < 0 || j >= n || grid[i][j] == '0'){
            return;
        }
        grid[i][j] = '0';
        dfs(grid, m, n, i, j + 1);
        dfs(grid, m, n, i + 1, j);
        dfs(grid, m, n, i, j - 1);
        dfs(grid, m, n, i - 1, j);
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        if(m == 0)
            return 0;
        int n = grid[0].size();
        if(n == 0)
            return 0;
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid, m, n, i, j);
                }
            }
        }
        return count;
    }
};


class Solution {
private:
    void bfs (vector<vector<char>>& grid, int i, int j, set<pair<int, int>>& visited, int m, int n) {
        queue<pair<int, int>> q;
        q.push({i, j});
        visited.insert({i, j});
        while (!q.empty()) {
            pair<int, int> cur = q.front();
            q.pop();
            int x = cur.first, y = cur.second;
            if (y-1 >= 0 && grid[x][y-1] == '1' && visited.count({x, y-1}) == 0) {
                q.push({x, y-1});
                visited.insert({x, y-1});
            }
            if (y+1 < n && grid[x][y+1] == '1' && visited.count({x, y+1}) == 0) {
                q.push({x, y+1});
                visited.insert({x, y+1});
            }
            if (x-1 >= 0 && grid[x-1][y] == '1' && visited.count({x-1, y}) == 0) {
                q.push({x-1, y});
                visited.insert({x-1, y});
            }
            if (x+1 < m && grid[x+1][y] == '1' && visited.count({x+1, y}) == 0) {
                q.push({x+1, y});
                visited.insert({x+1, y});
            }
        } 
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        if (m == 0) {
            return 0;
        }
        int n = grid[0].size();
        if (n == 0) {
            return 0;
        }
        set<pair<int, int>> visited;
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && visited.count({i, j}) == 0) {
                    count++;
                    bfs(grid, i, j, visited, m, n);    
                }    
            }
        }
        return count;
    }
};
