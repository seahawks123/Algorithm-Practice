class Solution {
private:
    void dfs(vector<vector<char>>& grid, int m, int n, int i, int j){
        if(i >= m || i < 0 || j < 0 || j >= n || grid[i][j] == '0'){
            return;
        }
        grid[i][j] = '0';
        dfs(grid, m, n, i, j + 1);
        dfs(grid, m, n, i + 1, j);
        dfs(grid, m, n, i, j - 1);
        dfs(grid, m, n, i - 1, j);
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        if(m == 0)
            return 0;
        int n = grid[0].size();
        if(n == 0)
            return 0;
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid, m, n, i, j);
                }
            }
        }
        return count;
    }
};
