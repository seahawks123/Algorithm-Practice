class Solution {
private:
    unordered_map<string, int> map = {{"I", 1}, {"V", 5}, {"X", 10}, {"L", 50}, {"C", 100}, {"D", 500}, {"M", 1000}, 
    {"IV", 4}, {"IX", 9}, {"XL", 40}, {"XC", 90}, {"CD", 400}, {"CM", 900}};
    
public:
    int romanToInt(string s) {
        if(s.size() == 0)
            return 0;
        int i = 0, res = 0, continous = 1;
        while(i < s.size()){
            if(i + 1 < s.size() && map.count(s.substr(i, 2))){
                res += map[s.substr(i, 2)];
                i = i+2;
                continue;
            }
            else if((i+1) < s.size() && s[i] == s[i+1]){
                continous++;
                i++;
            }
            res += continous * map[s.substr(i, 1)];
            continous = 1;
            i++;
        }
        return res;
    }
};
