class Solution {
private:
    void dfs(vector<vector<char>>& board, int i, int j){
        if(i >= board.size() || i < 0 || j >= board[0].size() || j < 0 || board[i][j] == '#' || board[i][j] == 'X')
            return;
        board[i][j] = '#';
        dfs(board, i+1, j);
        dfs(board, i-1, j);
        dfs(board, i, j+1);
        dfs(board, i, j-1);
    }
    
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        if(m <= 2)
            return;
        int n = board[0].size();
        if(n <= 2)
            return;
        for(int i = 0; i < n; i++){
            if(board[0][i] == 'O'){
                dfs(board, 0, i);    
            }
            if(board[m - 1][i] == 'O'){
                dfs(board, m-1, i);     
            }
        }
        
        for(int i = 0; i < m; i++){
            if(board[i][0] == 'O'){
                dfs(board, i, 0);         
            }
            if(board[i][n-1] == 'O'){
                dfs(board, i, n-1);     
            }    
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == '#'){
                    board[i][j] = 'O';
                }
                else
                    board[i][j] = 'X';
                
            }
        }
    }
};
