class Solution {
private:
    void dfs(vector<vector<int>>& res, vector<int>& cur, vector<int>& visited, vector<int>& nums){
        if(cur.size() == nums.size()){
            res.push_back(cur);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if((i > 0 && nums[i] == nums[i-1]) && visited[i-1]) 
                continue;
            if(!visited[i]){
                cur.push_back(nums[i]);
                visited[i] = 1;
                dfs(res, cur, visited, nums);
                cur.pop_back();
                visited[i] = 0;
            }
        }
    }
    
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> visited(nums.size(), 0);
        vector<int> cur;
        sort(nums.begin(), nums.end());
        dfs(res, cur, visited, nums);
        return res;
    }
};
