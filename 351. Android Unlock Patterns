class Solution {
private:
    bool break_rule(int old_r, int old_c, int r, int c, vector<vector<int>>& board){
        if(old_r == -1 && old_c == -1){
            return false;
        }
        if(old_r == r && abs(c - old_c) > 1 && board[r][1] != -1){
            return true;    
        }    
        if(old_c == c && abs(r - old_r) > 1 && board[1][c] != -1){
            return true;
        }
        if(abs(r - old_r) > 1 && abs(c - old_c) > 1 && board[1][1] != -1){
            return true;
        }
        return false;
    }
    
    void dfs(vector<vector<int>>& board, int m, int n, int& count, int steps, int r, int c){
        if(steps > n)
            return;
        if(steps >= m && steps <= n){
            count++;
        }
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                if(board[i][j] != -1 && !break_rule(r, c, i, j, board)){
                    int temp = board[i][j];
                    board[i][j] = -1;
                    dfs(board, m, n, count, steps + 1, i, j);    
                    board[i][j] = temp;
                }
            }
        }    
    }
    
public:
    int numberOfPatterns(int m, int n) {
        vector<vector<int>> board(3, vector<int>(3, 0));
        int temp = 1;
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                board[i][j] = temp;
                temp++;
            }
        }
        int count = 0, steps = 0;
        dfs(board, m, n, count, steps, -1, -1);    
        return count;
    }
};
