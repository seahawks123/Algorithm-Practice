class Solution {
private:
    bool is_anagram(string s, string p){
        if(s.size() != p.size())
            return false;
        sort(s.begin(), s.end());
        sort(p.begin(), p.end());
        return (s == p?true:false);
    }
    
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        if(s.size() < p.size())
            return res;
        for(int i = 0; i < s.size(); i++){
            string temp;
            for(int j = i; j < i + p.size() && j < s.size(); j++){
                temp.push_back(s[j]);            
            }
            if(is_anagram(temp, p)){
                res.push_back(i);
            }
        }
        return res;
    }
};


//second solution

class Solution {
private:
    bool is_anagram(string& s, string p, int i, int j){
        int len = j - i + 1;
        if(len != p.length())
            return false;
        unordered_map<char, int> map;
        while(i <= j){
            map[s[i]]++;
            i++;
        }
        for(int i = 0; i < p.length(); i++)
            map[p[i]]--;
        for(auto it = map.begin(); it != map.end(); it++){
            if(it->second != 0)
                return false;
        }
        return true;
    }
    
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        if(s.size() < p.size())
            return res;
        int i = 0;
        int j = p.length()-1;
        
        while(i != s.length()){
            if(j >= s.length())
                break;
            bool flag = is_anagram(s, p, i, j);
            if(flag)
                res.push_back(i);
            i++;
            j++;
        }
        return res;
    }
};


class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        if(s.size() < p.size())
            return res;
        int p_size = p.size();
        int s_size = s.size();
        int i = 0;
        vector<int> map(256, 0);
        for(int num = 0; num < p_size; num++){
           map[p[num]]++; 
        }
        while(i <= (s_size - p_size)){
            vector<int> temp = map;
            bool flag = true;
            for(int j = i; j < i + p_size; j++){
                if(--temp[s[j]] < 0){
                    flag = false;
                    break;
                }
            }
            if(flag){
                res.push_back(i);
            }
            i++;
        }
        return res;
    }
};
