/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
        if(!l1 || !l2){
            return (l1 == NULL?l2:l1);
        }
        if(l1->val <= l2->val){
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else{
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
    
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* dummy = new ListNode(-1);
        dummy->next = head;
        ListNode* prev = dummy;
        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
            prev = prev->next;
        }
        prev->next = NULL;
        ListNode* res1 = sortList(head);
        ListNode* res2 = sortList(slow);
        return mergeTwoLists(res1, res2);
    }
};
