class Solution {
private:
    int solveMaxProfit(vector<int> &prices) {
        int res = 0;
        for (int i = 1; i < prices.size(); ++i) {
            if (prices[i] - prices[i - 1] > 0) {
                res += prices[i] - prices[i - 1];
            }
        }
        return res;
    }
    
public:
    int maxProfit(int k, vector<int>& prices) {
        if(prices.size() == 0)
            return 0;
        if(k >= prices.size()){
            return solveMaxProfit(prices); 
        }
        vector<int> global(k+1, 0);
        vector<int> local(k+1, 0);
        for(int i = 1; i < prices.size(); i++){
            int diff = prices[i] - prices[i-1];
            for(int j = k; j >=1; j--){
                local[j] = max(global[j-1] + max(diff, 0), local[j] + diff);
                global[j] = max(local[j], global[j]);    
            }
        }
        return global[k];
    }
};
