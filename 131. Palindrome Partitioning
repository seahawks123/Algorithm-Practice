class Solution {
private:
    bool is_palindrome(string s){
        if(s.length() <= 1)
            return true;
        int low = 0, high = 0;
        if(s.length() % 2 == 0){
            low = s.length()/2-1;
            high = s.length()/2;
        }
        else{
            low = s.length()/2;
            high = s.length()/2;
        }
        while(low >= 0 && high < s.length()){
            if(s[low] != s[high])
                return false;
            low--;
            high++;
        }
        return true;
    }
    
    void dfs(vector<vector<string>>& res, vector<string>& cur, int index, string s){
        if(index >= s.length()){
            res.push_back(cur);
            return;
        }
        for(int i = index; i < s.length(); i++){
            string temp = s.substr(index, i - index + 1);
            if(is_palindrome(temp)){
                cur.push_back(temp);
                dfs(res, cur, i + 1, s);
                cur.pop_back();
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        if(s.empty())
            return res;
        vector<string> cur;
        dfs(res, cur, 0, s);
        return res;
    }
};
