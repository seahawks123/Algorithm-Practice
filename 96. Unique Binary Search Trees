class Solution {
public:
    int numTrees(int n) {
        vector<int> res(n+1, 0);
        res[0] = 1;
        res[1] = 1;
        for(int i = 2; i <= n; i++){
            for(int j = 0; j <= i-1; j++){
                res[i] += res[j]*res[i-1-j];
            }
        }
        cout<<res[1]<<endl;
        return res[n];
    }
};

//recursive solution

class Solution {
public:
    int numTrees_helper(int p, int q){
        if(p >= q)
            return 1;
        int res = 0;
        for(int i = p; i <= q; i++){
            int left_num = numTrees_helper(p, i-1);
            int right_num = numTrees_helper(i+1, q);
            res = res + left_num*right_num;
        }
        return res;
    }
    
    int numTrees(int n) {
        return numTrees_helper(1, n);
    }
};
