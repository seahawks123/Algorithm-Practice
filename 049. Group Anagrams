class Solution {
private: 
	bool is_Anagrams(string s, string t){
		if(s.length() != t.length())
			return false;
		sort(s.begin(), s.end());
		sort(t.begin(), t.end());
		return s == t? true:false;
	}
public:
    vector<string> empty_strings(vector<string>& strs){
        vector<string> res;
        for(int i = 0; i < strs.size(); i++){
            if(strs[i] == "")
                res.push_back(strs[i]);
        }
        return res;
    }
	vector<vector<string>> groupAnagrams(vector<string>& strs) {
	    vector<string> empty_s = empty_strings(strs);
		vector<vector<string> > res;
		vector<bool> need_work(strs.size(), true);
		for(int i = 0; i < strs.size(); i++){
		    if(!need_work[i] || strs[i] == "")
		        continue;
		    vector<string> vec;
		    vec.push_back(strs[i]);
		    for(int j = i + 1; j < strs.size(); j++){
		        if(is_Anagrams(strs[i], strs[j])){
		        	vec.push_back(strs[j]);
		        	need_work[j] = false;
		        }    
		    }
		    if(vec.size() == 1 && i != (strs.size()-1)){
		    	    vec.pop_back();
		    }
		    res.push_back(vec);
		}
		res.push_back(empty_s);
		return res;
	}
};

//
class Solution {
private: 
	bool is_Anagrams(string s, string t){
		if(s.length() != t.length())
			return false;
		sort(s.begin(), s.end());
		sort(t.begin(), t.end());
		return s == t? true:false;
	}
public:
	vector<vector<string>> groupAnagrams(vector<string>& strs) {
		vector<vector<string> > res;
		vector<bool> need_work(strs.size(), true);
		for(int i = 0; i < strs.size(); i++){
		    if(!need_work[i])
		        continue;
		    vector<string> vec;
		    vec.push_back(strs[i]);
		    for(int j = i + 1; j < strs.size(); j++){
		        if(is_Anagrams(strs[i], strs[j])){
		        	vec.push_back(strs[j]);
		        	need_work[j] = false;
		        }    
		    }
		    res.push_back(vec);
		}
		return res;
	}
};

class Solution {
public:
	vector<vector<string>> groupAnagrams(vector<string>& strs) {
		vector<vector<string> > res;
		unordered_map<string, vector<string> > map;
		for(int i = 0; i < strs.size(); i++){
		    string s = strs[i];
		    sort(s.begin(), s.end());
		    map[s].push_back(strs[i]);
		}
		for(auto it = map.begin(); it != map.end(); it++){
		    res.push_back(it->second);
		}
		return res;
	}
};
