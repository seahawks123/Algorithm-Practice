class Solution {
private:
    int helper(vector<string>& strs, int m, int n, int index){
        if(index == strs.size() || (m <= 0 && n <= 0)){
            return 0;
        }
        int count0 = 0, count1 = 0;
        for(int i = 0; i < strs[index].length(); i++){
            if(strs[index][i] == '0')
                count0++;
            else
                count1++;
        }
        
        return max(helper(strs, m, n, index + 1), helper(strs, m - count0, n - count1, index + 1) + 1);
    }
    
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        if(strs.size() == 0 || m <= 0 || n <= 0){
            return 0;
        }
        return helper(strs, m, n, 0);
    }
};



class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for(int i = 0; i < strs.size(); i++){
            int count0 = 0, count1 = 0;
            for(auto s:strs[i]){
                s == '0'?count0++:count1++;  
            }
            for(int j = m; j >= count0; j--){
                for(int k = n; k >= count1; k--){
                    dp[j][k] = max(dp[j][k], dp[j - count0][k - count1] + 1);
                }
            }    
        }
        return dp[m][n];
    }
};
