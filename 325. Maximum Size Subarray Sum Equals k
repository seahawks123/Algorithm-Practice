class Solution {
public:
    int maxSubArrayLen(vector<int>& nums, int k) {
        int res = 0;
        for(int i = 0; i < nums.size(); i++){
            int sum = 0;
            for(int j = i; j < nums.size(); j++){
                sum += nums[j];
                if(sum == k){
                    res = max(res, j - i + 1);
                }
            }
        }
        return res;
    }
};


class Solution {
public:
    int maxSubArrayLen(vector<int>& nums, int k) {
        int res = 0, sum = 0;
        unordered_map<int, int> map;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            if(sum == k){
                res = max(res, i + 1);
            }
            if(map.count(sum - k)){
                res = max(res, i - map[sum-k]);
            }
            if(!map.count(sum)){
                map[sum] = i;
            }
        }
        return res;
    }
};
