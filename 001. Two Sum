class Solution{
public:
    vector<int> twoSum(vector<int> &numbers, int target) {
        vector<int> res;
        if(numbers.size() <= 1)
            return res;
        unordered_multimap<int, int> map;
        for(int i = 0; i < numbers.size(); i++){
            map.insert(pair<int, int>(numbers[i], i));
        }
        sort(numbers.begin(), numbers.end());
        int low = 0, high = numbers.size()-1;
        while(low < high){
            int sum = numbers[low] + numbers[high];
            if(sum == target){
                res.push_back(numbers[low]);
                res.push_back(numbers[high]);
                break;
            }
            else if(sum > target){
                high--;
            }
            else{
                low++;
            }
        }
        int count = 0;
        vector<int> final_res(2, 0);
        for(auto it = map.begin(); it != map.end(); it++){
            if(it->first == res[0] || it->first == res[1]){
                final_res[count] = it->second;
                count++;
            }    
        }
        sort(final_res.begin(), final_res.end());
        return final_res;
    }
};


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res; 
        unordered_map<int, int> map;
        for(int i = 0; i < nums.size(); i++){
            int need = target - nums[i];
            if(map.count(need)){
                res.push_back(map[need]);
                res.push_back(i);
                return res;
            }
            map[nums[i]] = i;
        }
        return res;
    }
};
