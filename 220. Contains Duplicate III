class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        for(int i = 0; i < nums.size(); i++){
            for(int j = i+1; j <= i + k && j < nums.size(); j++){
                if(abs(nums[i] - nums[j]) <= t && abs(nums[i] - nums[j]) != -2147483648)
                    return true;
            }
        }
        return false;
    }
};

//solution 2
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        if(nums.size() <= 1 || k == 0)
            return false;
        multiset<int> set;
        for(int i = 0; i < nums.size(); i++){
            if(set.size() > k)
                set.erase(nums[i-k-1]);
            multiset<int>::iterator it = set.lower_bound(nums[i] - t);
            if(it != set.end() && *it - nums[i] <= t)
                return true;
            set.insert(nums[i]);
        }
        return false;
    }
};
