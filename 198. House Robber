class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 0)
            return 0;
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n; i++){
            dp[i] = max(dp[i-1], dp[i-2] + nums[i]);
        }
        return dp[n-1];
    }
};


class Solution {
private:
    int dfs(vector<int>& nums, int start, int end, unordered_map<int, int>& map){
        if(end < start)
            return 0;
        if(end == start)
            return nums[start];
        if(end - start == 1)
            return max(nums[start], nums[end]);
        int res1 = map.count(start+2) == 0? dfs(nums, start + 2, end, map):map[start+2];
        int res2 = map.count(start+1) == 0?dfs(nums, start + 1, end, map):map[start+1];
        int res = max(nums[start] + res1, res2);
        map[start] = res;
        return res;
    }
public:
    int rob(vector<int>& nums) {
        unordered_map<int, int> map;
        return dfs(nums, 0, nums.size()-1, map);
    }
};
