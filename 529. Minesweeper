class Solution {
private:    
    void dfs(vector<vector<char>>& board, int i, int j, vector<vector<int>>& dirs) {
        if(i >= board.size() || i < 0 || j >= board[0].size() || j < 0 || board[i][j] != 'E') {
            return;    
        }
        char count = '0';
        for(int k = 0; k < dirs.size(); k++) {
            int x = dirs[k][0], y = dirs[k][1];
            int ii = i + x, jj = j + y;
            if(ii >= board.size() || ii < 0 || jj >= board[0].size() || jj < 0) {
                continue;
            }
            if(board[ii][jj] == 'M' || board[ii][jj] == 'X') {
                count++;
            }
        }  
        count == '0'?board[i][j] = 'B':board[i][j] = count;
        if(board[i][j] == 'B') {
            for(int k = 0; k < dirs.size(); k++) {
                int x = dirs[k][0], y = dirs[k][1];
                int ii = i + x, jj = j + y;
                dfs(board, ii, jj, dirs);
            }
        }
    }
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        if(board[click[0]][click[1]] == 'M') {
            board[click[0]][click[1]] = 'X';
            return board;
        }              
        vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
        dfs(board, click[0], click[1], dirs);
        return board;
    }
};
