/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    pair<int, int> dfs(TreeNode* root, TreeNode* parent, int& res){
        if(!root)
            return {0, 0};
        pair<int, int> left = dfs(root->left, root, res);
        pair<int, int> right = dfs(root->right, root, res);
        res = max(res, left.first + right.second + 1);
        res = max(res, right.first + left.second + 1);
        int inc = 0, dec = 0;
        if(root->val == parent->val - 1){
            inc = max(left.first, right.first) + 1;
        }
        else if(root->val == parent->val + 1){
            dec = max(left.second, right.second) + 1;
        }
        return {inc, dec};
    }
public:
    int longestConsecutive(TreeNode* root) {
        int res = 0;
        dfs(root, root, res);
        return res;
    }
};
