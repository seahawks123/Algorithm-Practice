class Solution {
private:
    bool palin(string s){
        if(s.size() == 0)
            return false;
        int left = 0;
        int right = s.size() -1;
        while(left <= right){
            if(s[left] != s[right])
                return false;
            left++;
            right--;
        }
        return true;
    }
public:
    string longestPalindrome(string s) {
        if(s.size() <= 1)
            return s;
        int len = 0;
        string res;
        for(int i = 0; i < s.size(); i++){
            for(int j = i; j < s.size(); j++){
                string t = s.substr(i, j - i + 1);
                if(palin(t) && (t.size() > len)){
                    res = t;
                    len = res.size();
                }
            }
        } 
        return res;
    }
};




class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size() <= 1)
            return s;
        string res = "";
        for(int i = 0; i < s.size(); i++){
            int l = i, r = i;
            while(l > 0 && r < s.size() - 1 && s[l-1] == s[r + 1]){
                l--;
                r++;
            }
            if((r - l + 1) > res.size()){
                res = s.substr(l, r - l + 1);    
            }
        }
        cout<<res<<endl;
        for(int i = 0; i < s.size() - 1; i++){
            if(s[i] == s[i + 1]){
                int l = i, r = i + 1;
                while(l > 0 && r < s.size()-1 && s[l - 1] == s[r + 1]){
                    l--;
                    r++;
                }
                if(r - l + 1 > res.size()){
                    res = s.substr(l, r - l + 1);
                }
            }    
        }
        return res;
    }
};
