class Solution {
private: 
    bool find(vector<int>& vec, int low, int high, int target){
        if(low > high)
            return false;
        int mid = (low + high)/2;
        if(vec[mid] == target){
            return true;
        }
        if(target < vec[mid])
            return find(vec, low, mid-1, target);
        else
            return find(vec, mid+1, high, target);
    }
    
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        if(nums1.size() == 0 || nums2.size() == 0)
            return res;
        if(nums1.size() < nums2.size())
            nums1.swap(nums2);
        int size1 = nums1.size();
        int size2 = nums2.size();
        if(nums2[0] > nums1[size1-1] || nums2[size2-1] < nums1[0])
            return res;
        for(int i = 0; i < size2; i++){
            if(find(nums1, 0, size1-1, nums2[i])){
                
                res.push_back(nums2[i]);
            }
        }
        return res;
    }
};


solution 2
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int i = 0, j = 0;
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i] == nums2[j]){
                res.push_back(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i] > nums2[j])
                j++;
            else
                i++;
        }
        return res;
    }
};

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        unordered_map<int, int> map;
        for(int i = 0; i < nums1.size(); i++){
            map[nums1[i]]++;
        }
        for(int i = 0; i < nums2.size(); i++){
            if(map[nums2[i]] > 0){
                res.push_back(nums2[i]);
                map[nums2[i]]--;
            }
        }
        return res;
    }
};
