class RandomizedSet {
private:
    unordered_set<int> s;    
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(s.count(val) == 0){
            s.insert(val);
            return true;
        }    
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(s.count(val) == 1){
            s.erase(val);
            return true;
        }    
        return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int size = s.size();
        int random = rand()%size, count = 0;
        auto it = s.begin();
        while(count++ < random){
            it++;
            
        }
        int res = *it;
        return res;
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
 
 
 
 
 class RandomizedSet {
private:
    unordered_map<int, int> map;
    vector<int> vec;
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(map.count(val) == 1)
            return false;
        vec.push_back(val);
        map[val] = vec.size() - 1;
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(map.count(val) == 0)
            return false;
        int index = map[val], last = vec.back();
        map[last] = index;
        swap(vec.back(), vec[index]);
        vec.pop_back();
        map.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return vec[rand()%vec.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
