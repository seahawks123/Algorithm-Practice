class Solution {
private: 
    double distance(const pair<int, int>& a, const pair<int, int>& b){
        return sqrt(pow((a.first - b.first), 2) + pow((a.second - b.second),2));
    }
    
    int factorial(int m){
        if(m == 0)
            return 1;
        return m*factorial(m-1);
    }
    
    int combos(int n){
        return factorial(n)/factorial(n-2);
    }
    
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        if(points.size() < 3)
            return 0;
        int res = 0;
        for(int i = 0; i < points.size(); i++){
            unordered_map<double, int> _map;
            for(int j = 0; j < points.size(); j++){
                if(i != j)
                    _map[distance(points[i], points[j])]++;
            }
            for(auto it = _map.begin(); it != _map.end(); it++){
                if(it->second >= 2)
                    res += combos(it->second);
            }
        }
        return res;
    }
};
