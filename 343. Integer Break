class Solution {
private:
    unordered_map<int, int> map;
    
    int dfs(int n){
        if(n == 1)
            return 1;
        if(n == 2)
            return 2;
        if(n == 3)
            return 3;
        int max_val = INT_MIN;
        for(int i = 2; i < n; i++){
            int left = i;
            int right = map.count(n-i) == 1? map[n-i]:dfs(n-i);
            max_val = max(max_val, left*right); 
        }
        map[n] = max_val;
        return max_val;
    }
    
public:
    int integerBreak(int n) {
        if(n == 1)
            return 0;
        if(n == 2)
            return 1;
        if(n == 3)
            return 2;
        return dfs(n);
    }
};


class Solution {
public:
    long long integerBreak(long long n) {
        if(n == 2) return 1;
        if(n == 3) return 2;
        if(n == 4) return 4;
        if(n == 5) return 6;
        if(n == 6) return 9;
        return 3 * integerBreak(n - 3);
    }
};
