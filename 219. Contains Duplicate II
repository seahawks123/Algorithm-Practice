class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        if(nums.size() <= 1 || k == 0)
            return false;
        unordered_map<int, int> hashmap;
        for(int i = 0; i < nums.size(); i++){
            if(hashmap.find(nums[i]) != hashmap.end() && i-hashmap[nums[i]] <= k)
                return true;
            else
                hashmap[nums[i]] = i;
        }
        return false;
        
    }
};

//solution 2

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        if(nums.size() <= 1 || k == 0)
            return false;
        unordered_map<int, int> hashmap;
        for(int i = 0; i < nums.size(); i++){
            if(hashmap.find(nums[i]) != hashmap.end() && i-hashmap[nums[i]] <= k)
                return true;
            else
                hashmap[nums[i]] = i;
        }
        return false;
        
    }
};
