class Solution {
public:
    int minCostII(vector<vector<int>>& costs) {
        int m = costs.size();
        if(m == 0)
            return 0;
        int n = costs[0].size();
        if(n == 0)
            return 0;
        if(m == 1 && n== 1)
            return costs[0][0];
        vector<vector<int>> dp(m+1, vector<int>(n, 0));
        for(int i = 1; i <= m; i++){
            for(int j = 0; j < n; j++){
                int temp = dp[i-1][j];
                dp[i-1][j] = INT_MAX;
                int val = INT_MAX;
                for(int k = 0; k < n; k++){
                    val = min(val, dp[i-1][k]);                  
                }   
                dp[i-1][j] = temp;
                dp[i][j] = val + costs[i-1][j];
            }
        }
        int res = INT_MAX;
        for(int k = 0; k < n; k++){
            res = min(res, dp[m][k]);                  
        } 
        return res;
    }
};


class Solution {
public:
    int minCostII(vector<vector<int>>& costs) {
        int m = costs.size();
        if(m == 0)
            return 0;
        int n = costs[0].size();
        if(n == 0)
            return 0;
        int min1 = 0, min2 = 0, prev = -1;
        for(int i = 0; i < m; i++){
            int cur_min1 = INT_MAX, cur_min2 = INT_MAX, cur_prev = -1;
            for(int j = 0; j < n; j++){
                int cost = costs[i][j] + (j == prev?min2:min1);
                if(cost < cur_min1){
                    cur_min2 = cur_min1;
                    cur_min1 = cost;
                    cur_prev = j;
                }
                else if(cost < cur_min2){
                    cur_min2 = cost;    
                }
            }
            min1 = cur_min1;
            min2 = cur_min2;
            prev = cur_prev;
        }
        return min1;
    }
};
