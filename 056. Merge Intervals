/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
private:
    bool static compare(Interval& a, Interval& b){
        return (a.start < b.start);
    }
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        sort(intervals.begin(), intervals.end(), compare);
        int size = intervals.size();
        if(size == 0)
            return res;
        res.push_back(intervals[0]);
        for(int i = 1; i < size; i++){
            Interval cur = intervals[i];
            if(cur.start <= res.back().end){
                res.back().end = max(cur.end, res.back().end);    
            } 
            else{
                res.push_back(cur);
            }
        }
        return res;
    }
};
