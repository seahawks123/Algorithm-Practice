/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
private:
    vector<int> res;
    int pos;
    
    void helper(vector<NestedInteger>& vec, vector<int>& res){
        for(int i = 0; i < vec.size(); i++){
            NestedInteger cur = vec[i];
            if(cur.isInteger()){
                res.push_back(cur.getInteger());
            }    
            else{
                helper(cur.getList(), res);
            }
        }
    }
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        pos = -1;
        for(int i = 0; i < nestedList.size(); i++){
            if(nestedList[i].isInteger()){
                res.push_back(nestedList[i].getInteger());
            }
            else{
                helper(nestedList[i].getList(), res);    
            }
        }
    }

    int next() {
        return res[pos];        
    }

    bool hasNext() {
        if(pos + 1 < res.size()){
            pos++;
            return true;
        }        
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
 
 
 
 /**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
private:
    stack<NestedInteger> s;
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        for(int i = nestedList.size() - 1; i >=0; i--){
            s.push(nestedList[i]);
        }
    }

    int next() {
        int res = s.top().getInteger();
        s.pop();
        return res;
    }

    bool hasNext() {
        while(!s.empty()){
            if(s.top().isInteger()){
                return true;
            }    
            NestedInteger cur = s.top();
            s.pop();
            vector<NestedInteger> vec = cur.getList();
            for(int i = vec.size() - 1; i >= 0; i--){
                s.push(vec[i]);
            }
        }
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
